#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

struct BurningPoint
{
    vec4 pos;
    vec4 basePos;
    vec4 normal;
    vec4 baseNorm;
    uvec4 bob;
    uvec4 boby;
    uvec4 bobb;
    uvec2 bobb3;
    uint nCount;
    float heat;
};

struct Particle {
    vec4 pos;
    vec4 color;
    float alpha;
    float size;
    float rotation;
    uint type;
    // Attributes not used in shader
    vec4 vel;
};

layout(std140, binding = 0) buffer Bumbo
{
   Particle particles[ ];
};

// Binding 1 : Position storage buffer
layout(std140, binding = 1) buffer Burn
{
   BurningPoint bPoints[ ];
};

layout (binding = 3) buffer GRID
{
    int cells[];
};

layout (binding = 4) uniform UBO
{
    vec4 click;
    float deltaT;
    int pCount;
    int bCount;
} ubo;

layout (local_size_x = 512) in;

void main() 
{
    uint index = gl_GlobalInvocationID.x;
    if (index >= ubo.pCount)
        return;
    int cindex;
    ivec4 gIndex = ivec4(particles[index].pos*20);
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            for(int k=0;k<3;k++){
                cindex =  (gIndex.y+i-1) * 40000 + (gIndex.z+j-1)*200 + (gIndex.x+k-1);
                
                if(cindex>=0 && cindex<8000000){
                    cindex = cells[cindex];
                    if(cindex>=0 && cindex<ubo.bCount){
                        
                        if(bPoints[cindex].heat<75.0f)
                            bPoints[cindex].heat+=0.02f;
                        particles[index].pos += bPoints[cindex].normal*0.005f;
                    }
                }
            }
        }
    }
}

