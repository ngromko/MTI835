#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

struct Particle {
    vec4 pos;
    vec4 color;
    vec4 color1;
    /*float alpha;
    float size;
    float rotation;
    uint type;*/
    // Attributes not used in shader
    vec4 vel;
};

struct BurningPoint
{
    vec4 pos;
    vec4 basePos;
    vec4 normal;
    vec4 baseNorm;
    uint neighs[10];
    uint nCount;
    float heat;
};
layout(std430, binding = 0) buffer Bumbo
{
   Particle particles[ ];
};
// Binding 1 : Position storage buffer
layout(std430,binding = 1) buffer Burning
{
   BurningPoint bPoints[];
};

layout (binding = 4) uniform UBO
{
        //vec4 delta;
        vec4 click;
        float deltaT;
        int pCount;
        int bCount;
        //int fill;
} ubo;

layout (local_size_x = 512) in;

void main() 
{
    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
        // Faire rien si le point ne brule pas
    if (index >= ubo.bCount)
		return;	
    BurningPoint me = bPoints[index];
    
    uint ncount = me.nCount&15;

    if(me.heat>=75.0f){
        for(int i=0;i<ncount;i++){
            if(bPoints[me.neighs[i]].heat<=75.0f){
                bPoints[me.neighs[i]].heat+=0.02f+sign(bPoints[me.neighs[i]].pos.y - me.pos.y)*0.01f;
            }
        }
        me.heat+=ubo.deltaT;
        if(me.heat>75.5f){
            particles[index].pos=bPoints[index].pos;
            me.heat=75.0f;
        }
        bPoints[index].heat=me.heat;
    }
    
    /*
    pIndex++;
    if(pIndex>=6)
        pIndex=0;
    me.partIndex=pIndex;*/
    
    //float particleTimer = ubo.deltaT * 0.45f;
    /*particles[index].alpha += particleTimer * 2.5f;
    particles[index].size -= particleTimer * 0.5f;
    particles[index+8000].pos.y = ubo.bCount;*/
}

