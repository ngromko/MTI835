#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

struct BurningPoint
{
    vec4 pos;
    vec4 basePos;
    vec4 normal;
    vec4 baseNorm;
    uvec4 boby;
    uvec4 bob;
    uvec4 bobb;
    uvec4 bobb3;
};

layout (binding = 2) buffer UBOT
{
    mat4 ubos[];
};

// Binding 1 : Position storage buffer
layout(std140, binding = 1) buffer Burn
{
   BurningPoint bPoints[ ];
};

layout (binding = 3) buffer GRID
{
    uint cells[];
};

layout (binding = 4) uniform UBO
{
        //vec4 delta;
        vec4 click;
        float deltaT;
        int pCount;
        int bCount;
        //int fill;
} ubo;

layout (local_size_x = 512) in;

void main() 
{
    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
        // Don't try to write beyond bPoint count
    if (index >= ubo.bCount)
        return;
    uint uboIndex = bPoints[index].bobb3.z>>16;
    uvec4 gIndex = uvec4(bPoints[index].pos*20);
    uint cindex =  gIndex.y * 40000 + gIndex.z*200 + gIndex.x;
    cells[cindex]=8000000;
    bPoints[index].pos =  ubos[uboIndex]*bPoints[index].basePos;
    bPoints[index].normal =  ubos[uboIndex]*bPoints[index].baseNorm;
    
    gIndex = uvec4(bPoints[index].pos*20);
    cindex =  gIndex.y * 40000 + gIndex.z*200 + gIndex.x;
    cells[cindex]=index;
}

